# -*- coding: utf-8 -*-
"""real_time_prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ibaqbcoqkp7-XX7vG35GeGYW1H3Vhcvz
"""

import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import load_model
import time

# Load the pre-trained model
model = load_model('exchange_rate_prediction_model.h5')

# Define a function to fetch and preprocess the latest data
def fetch_and_preprocess_data():
    data = yf.download('EURUSD=X', start=datetime.now() - timedelta(days=7), end=datetime.now())
    data.reset_index(inplace=True)
    data['Date'] = data['Date'].map(mdates.date2num)
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data[['Open', 'High', 'Low', 'Close']])
    X = scaled_data[:, :-1]
    return X, data['Close'], scaler

# Define a function to make predictions
def make_predictions(X, model):
    predictions = model.predict(X)
    return predictions

# Define a function to update the visualization
def update_visualization(actual, predicted, scaler):
    actual_inv = scaler.inverse_transform(np.hstack((X, actual.values.reshape(-1, 1))))
    predicted_inv = scaler.inverse_transform(np.hstack((X, predicted)))
    plt.figure(figsize=(12, 6))
    plt.plot(actual.index, actual_inv[:, -1], label='Actual Close', color='blue')
    plt.plot(actual.index, predicted_inv[:, -1], label='Predicted Close', color='red')
    plt.xlabel('Date')
    plt.ylabel('Exchange Rate')
    plt.title('Real-time Actual vs. Predicted Close Prices - EUR/USD')
    plt.legend()
    plt.show()

# Main loop for real-time prediction
while True:
    X, actual, scaler = fetch_and_preprocess_data()
    predicted = make_predictions(X, model)
    update_visualization(actual, predicted, scaler)
    time.sleep(60)  # Fetch and update every minute